package rpm

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

var testNoarchLead = []byte{0xED, 0xAB, 0xEE, 0xDB, 0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x6C, 0x65, 0x74, 0x73, 0x65, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2D, 0x30, 0x2E, 0x31, 0x2E, 0x30, 0x2D, 0x32, 0x2E, 0x66, 0x63, 0x32, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
var testSrcLead = []byte{0xED, 0xAB, 0xEE, 0xDB, 0x03, 0x00, 0x00, 0x01, 0x00, 0xFF, 0x6C, 0x65, 0x74, 0x73, 0x65, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2D, 0x30, 0x2E, 0x31, 0x2E, 0x30, 0x2D, 0x32, 0x2E, 0x66, 0x63, 0x32, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
var reserved = []byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

func TestLead_UnmarshalBinary(t *testing.T) {
	l := new(Lead)
	err := l.UnmarshalBinary(testNoarchLead)
	if err != nil {
		t.Fatal(err)
	}

	assert.EqualValues(t, 3, l.Major, ".Major")
	assert.EqualValues(t, 0, l.Minor, ".Minor")
	assert.Equal(t, "LeadTypeBinary", l.Type.String(), ".Type")
	assert.Equal(t, "LeadArchNoarch", l.Arch.String(), ".Arch")
	assert.Equal(t, "letsencrypt-0.1.0-2.fc24", l.GetName(), ".GetName()")
	assert.Equal(t, "LeadOSLinux", l.OS.String(), ".OS")
	assert.Equal(t, "LeadSignatureTypeHeaderSignature", l.SignatureType.String(), ".SignatureType")
	assert.EqualValues(t, reserved, l.Reserved[:], ".Reserved")

	err = l.UnmarshalBinary(testSrcLead)
	if err != nil {
		t.Fatal(err)
	}
	assert.EqualValues(t, 3, l.Major, ".Major")
	assert.EqualValues(t, 0, l.Minor, ".Minor")
	assert.Equal(t, "LeadTypeSource", l.Type.String(), ".Type")
	assert.Equal(t, "LeadArchNoarch", l.Arch.String(), ".Arch")
	assert.Equal(t, "letsencrypt-0.1.0-2.fc24", l.GetName(), ".GetName()")
	assert.Equal(t, "LeadOSLinux", l.OS.String(), ".OS")
	assert.Equal(t, "LeadSignatureTypeHeaderSignature", l.SignatureType.String(), ".SignatureType")
	assert.EqualValues(t, reserved, l.Reserved[:], ".Reserved")

}
